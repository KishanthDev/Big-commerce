import React from 'react';
import { render, screen } from '@testing-library/react';
import RootLayout, { metadata } from '@/app/layout'; // Import metadata properly (no require)
import { Geist, Geist_Mono } from 'next/font/google';


jest.mock('next/font/google', () => ({
  Geist: jest.fn(() => ({
    variable: '--font-geist-sans',
    className: 'geist-sans',
  })),
  Geist_Mono: jest.fn(() => ({
    variable: '--font-geist-mono',
    className: 'geist-mono',
  })),
}));

jest.mock('./Provider', () => {
  const ProviderMock = ({ children }: { children: React.ReactNode }) => (
    <div data-testid="provider">{children}</div>
  );
  ProviderMock.displayName = 'ProviderMock';
  return ProviderMock;
});

describe('RootLayout', () => {
  it('should export the correct metadata', () => {
    // âœ… no require(), just use imported metadata
    expect(metadata.title).toBe('Create Next App');
    expect(metadata.description).toBe('Generated by create next app');
    expect(metadata.robots).toEqual({
      index: true,
      follow: true,
    });
  });

  it('renders children correctly', () => {
    const testText = 'Test Child Content';
    render(
      <RootLayout>
        <div>{testText}</div>
      </RootLayout>
    );

    expect(screen.getByText(testText)).toBeInTheDocument();
  });

  it('matches snapshot', () => {
    const { asFragment } = render(
      <RootLayout>
        <div>Test Child</div>
      </RootLayout>
    );
    expect(asFragment()).toMatchSnapshot();
  });

  it('initializes fonts correctly', () => {
    render(
      <RootLayout>
        <div>Test</div>
      </RootLayout>
    );

    expect(Geist).toHaveBeenCalledWith({
      variable: '--font-geist-sans',
      subsets: ['latin'],
    });

    expect(Geist_Mono).toHaveBeenCalledWith({
      variable: '--font-geist-mono',
      subsets: ['latin'],
    });
  });
});